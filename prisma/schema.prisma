// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?   @default("Name not provided")
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  isOrgAdmin    Boolean   @default(false) @map(name: "is_org_admin")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts        Account[]
  sessions        Session[]
  collectionBoxes CollectionBox[]
  organization    Organization?
  donations       Donation[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model CollectionBox {
  id             String   @id @default(cuid())
  content        Json?
  sillyName      String   @default("Collection Box") @map(name: "silly_name")
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @map(name: "updated_at")
  userId         String   @map("user_id")
  organizationId String   @map(name: "organization_id")

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  donations    Donation[]

  @@map(name: "collection_boxes")
}

model Organization {
  id                String   @id @default(cuid())
  name              String
  adminId           String   @unique @map("admin_id")
  stripeId          String   @unique @map("stripe_id")
  short_description String   @default("")
  long_description  String   @default("")
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  admin         User            @relation(fields: [adminId], references: [id])
  CollectionBox CollectionBox[]

  @@map(name: "organizations")
}

model Donation {
  id              String   @id @default(cuid())
  ammount         Int
  userId          String?  @map("user_id")
  collectionBoxId String   @map(name: "collection_box_id")
  createdAt       DateTime @default(now()) @map(name: "created_at")
  updatedAt       DateTime @default(now()) @map(name: "updated_at")

  user          User?         @relation(fields: [userId], references: [id])
  collectionBox CollectionBox @relation(fields: [collectionBoxId], references: [id])

  @@map(name: "donations")
}
